# -*- coding: utf-8 -*-
"""no_esperados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QpmmeP20QnPzUEcwQiEsyQh-DOGQdyYI
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import re
import shutil

# Ruta base donde est√°n todas las carpetas mensuales
base_path = '/content/drive/MyDrive/QLAB PUCP/2022-2024/D - MIDAGRI/imagenes/Anterior'

# Diccionario de c√≥digos esperados (igual que antes)
expected_codes = {
    'IRC2056': 1, 'IRC2055': 2, 'IRC2208': 3, 'IRC2207': 4, 'IRC2206': 5, 'IRC2205': 6, 'IRC2204': 7, 'IRC2203': 8,
    'IRC2359': 9, 'IRC2358': 10, 'IRC2357': 11, 'IRC2356': 12, 'IRC2355': 13, 'IRC2354': 14, 'IRC2353': 15, 'IRC2352': 16,
    'IRC2510': 17, 'IRC2509': 18, 'IRC2508': 19, 'IRC2507': 20, 'IRC2506': 21, 'IRC2505': 22, 'IRC2504': 23, 'IRC2503': 24,
    'IRC2502': 25, 'IRC2658': 26, 'IRC2657': 27, 'IRC2656': 28, 'IRC2655': 29, 'IRC2654': 30, 'IRC2653': 31, 'IRC2652': 32,
    'IRC2808': 33, 'IRC2807': 34, 'IRC2806': 35, 'IRC2805': 36, 'IRC2804': 37, 'IRC2803': 38, 'IRC2802': 39,
    'IRC2959': 40, 'IRC2958': 41, 'IRC2957': 42, 'IRC2956': 43, 'IRC2955': 44, 'IRC2954': 45, 'IRC2953': 46, 'IRC2952': 47, 'IRC2951': 48,
    'IRC3111': 49, 'IRC3110': 50, 'IRC3109': 51, 'IRC3108': 52, 'IRC3107': 53, 'IRC3106': 54, 'IRC3105': 55, 'IRC3104': 56, 'IRC3103': 57,
    'IRC3102': 58, 'IRC3101': 59, 'IRC3100': 60, 'IRC3262': 61, 'IRC3261': 62, 'IRC3260': 63, 'IRC3259': 64, 'IRC3258': 65, 'IRC3257': 66,
    'IRC3256': 67, 'IRC3255': 68, 'IRC3254': 69, 'IRC3253': 70, 'IRC3252': 71, 'IRC3251': 72, 'IRC3250': 73, 'IRC3249': 74,
    'IRC3412': 75, 'IRC3411': 76, 'IRC3410': 77, 'IRC3409': 78, 'IRC3408': 79, 'IRC3407': 80, 'IRC3406': 81, 'IRC3405': 82,
    'IRC3404': 83, 'IRC3403': 84, 'IRC3402': 85, 'IRC3401': 86, 'IRC3400': 87,
    'IRC3563': 88, 'IRC3562': 89, 'IRC3561': 90, 'IRC3560': 91, 'IRC3559': 92, 'IRC3558': 93, 'IRC3557': 94, 'IRC3556': 95,
    'IRC3555': 96, 'IRC3554': 97, 'IRC3553': 98,
    'IRC3714': 99, 'IRC3713': 100, 'IRC3712': 101, 'IRC3711': 102, 'IRC3710': 103, 'IRC3709': 104, 'IRC3708': 105,
    'IRC3707': 106, 'IRC3706': 107, 'IRC3705': 108,
    'IRC3864': 109, 'IRC3863': 110, 'IRC3862': 111, 'IRC3861': 112, 'IRC3860': 113, 'IRC3859': 114, 'IRC3858': 115,
    'IRC3857': 116, 'IRC3856': 117,
    'IRC4020': 118, 'IRC4015': 119, 'IRC4014': 120, 'IRC4013': 121, 'IRC4012': 122, 'IRC4011': 123, 'IRC4010': 124,
    'IRC4171': 125, 'IRC4170': 126, 'IRC4169': 127, 'IRC4166': 128, 'IRC4165': 129, 'IRC4164': 130, 'IRC4163': 131,
    'IRC4162': 132, 'IRC4161': 133,
    'IRC4322': 134, 'IRC4321': 135, 'IRC4320': 136, 'IRC4319': 137, 'IRC4318': 138, 'IRC4317': 139, 'IRC4316': 140,
    'IRC4315': 141, 'IRC4314': 142, 'IRC4313': 143,
    'IRC4473': 144, 'IRC4472': 145, 'IRC4471': 146, 'IRC4470': 147, 'IRC4469': 148, 'IRC4468': 149, 'IRC4467': 150,
    'IRC4466': 151, 'IRC4465': 152, 'IRC4464': 153,
    'IRC4622': 154, 'IRC4620': 155, 'IRC4619': 156, 'IRC4618': 157, 'IRC4617': 158, 'IRC4616': 159, 'IRC4615': 160,
    'IRC4614': 161,
    'IRC4770': 162, 'IRC4769': 163, 'IRC4768': 164, 'IRC4767': 165, 'IRC4766': 166, 'IRC4765': 167, 'IRC4764': 168, 'IRC4763': 169,
    'IRC4918': 170, 'IRC4917': 171, 'IRC4916': 172, 'IRC4915': 173, 'IRC4914': 174,
    'IRC5069': 175, 'IRC5068': 176, 'IRC5067': 177, 'IRC5066': 178, 'IRC5065': 179,
    'IRC5220': 180, 'IRC5219': 181, 'IRC5218': 182, 'IRC5217': 183, 'IRC5216': 184,
    'IRC5370': 185, 'IRC5369': 186, 'IRC5368': 187
}


expected_set = set(expected_codes.keys())

# Generar lista de carpetas desde 2020_01 hasta 2021_12
from datetime import datetime
from dateutil.relativedelta import relativedelta

start = datetime(2022, 1, 1)
end = datetime(2022, 12, 1)

folders = []
while start <= end:
    folders.append(start.strftime('%Y_%m'))
    start += relativedelta(months=1)

# Procesar cada carpeta
for folder in folders:
    folder_path = os.path.join(base_path, folder)

    print(f'\nüîç Revisando carpeta: {folder_path}')

    if not os.path.exists(folder_path):
        print("‚ö†Ô∏è  Carpeta no encontrada. Se omite.")
        continue

    try:
        files = [f for f in os.listdir(folder_path) if f.endswith('.tif')]
        present_codes = set(f.split('_')[1] for f in files if f.startswith('IRC'))

        missing = expected_set - present_codes
        unexpected = present_codes - expected_set

        print(f"üì¶ Total archivos: {len(files)}")
        print(f"‚ùå Faltantes: {len(missing)}")
        for code in sorted(missing, key=lambda c: expected_codes.get(c, 9999)):
            print(f"  ‚Üí FALTANTE: {code}")

        print(f"‚ö†Ô∏è  No esperados: {len(unexpected)}")
        for code in sorted(unexpected):
            print(f"  ‚Üí NO ESPERADO: {code}")

        # Crear carpeta 'no_esperados' si no existe
        backup_path = os.path.join(folder_path, 'no_esperados')
        os.makedirs(backup_path, exist_ok=True)

        # Mover archivos no esperados o con duplicados (parentesis)
        moved_files = []
        for f in files:
            match = re.search(r'(IRC\d{4})(\s*\(\d+\))?', f)
            if match:
                code = match.group(1)
                has_parenthesis = match.group(2) is not None

                if code not in expected_set or has_parenthesis:
                    src = os.path.join(folder_path, f)
                    dst = os.path.join(backup_path, f)
                    try:
                        shutil.move(src, dst)
                        moved_files.append(f)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error al mover {f}: {e}")

        print(f"üìÇ Archivos movidos: {len(moved_files)}")
        for f in moved_files:
            print(f"  ‚Üí MOVIDO: {f}")

    except Exception as e:
        print(f"‚ùó Error procesando carpeta {folder}: {e}")